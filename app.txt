import dash
from dash import dcc, html, dash_table
import pandas as pd

# Initialize the Dash app
app = dash.Dash(__name__)

# --- Data Generation ---
# Data for Tab 1: Single table with 6 columns
data_tab1 = {
    'Product ID': [f'PROD-{i:03d}' for i in range(1, 11)],
    'Product Name': [f'Item {chr(65+i)}' for i in range(10)],
    'Category': ['Electronics', 'Home Goods', 'Apparel', 'Books', 'Electronics',
                 'Home Goods', 'Apparel', 'Books', 'Electronics', 'Home Goods'],
    'Price ($)': [round(10.5 * i + 50, 2) for i in range(10)],
    'Stock Quantity': [i * 50 + 100 for i in range(10)],
    'Last Updated': pd.to_datetime(pd.date_range(start='2023-01-01', periods=10, freq='D')).strftime('%Y-%m-%d')
}
df_tab1 = pd.DataFrame(data_tab1)

# Data for Tab 2: Five tables with 4 rows each
dfs_tab2 = []
for i in range(1, 6):
    data = {
        'Metric': [f'Value A{i}', f'Value B{i}', f'Value C{i}', f'Value D{i}'],
        'Q1 Data': [round(10 * (j + 1) + i, 2) for j in range(4)],
        'Q2 Data': [round(15 * (j + 1) + i, 2) for j in range(4)],
        'Q3 Data': [round(20 * (j + 1) + i, 2) for j in range(4)]
    }
    dfs_tab2.append(pd.DataFrame(data))

# --- Styling Configuration ---
# Define a common style for all tables for elegance
table_style_common = {
    'style_table': {
        'minWidth': '100%',
        'borderRadius': '10px',
        'overflow': 'hidden',
        'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)',
        'border': '1px solid #e0e0e0',
        'marginBottom': '20px' # Space between tables in Tab 2
    },
    'style_header': {
        'backgroundColor': '#e9ecef', # Light grey header
        'fontWeight': 'bold',
        'color': '#343a40', # Darker text for header
        'borderBottom': '2px solid #dee2e6',
        'padding': '12px 15px',
        'textAlign': 'left',
        'fontSize': '16px'
    },
    'style_data': {
        'backgroundColor': 'white',
        'color': '#495057', # Standard text color
        'borderBottom': '1px solid #f0f2f5', # Very light border between rows
        'padding': '10px 15px',
        'fontSize': '14px'
    },
    'style_cell': {
        'textAlign': 'left',
        'fontFamily': 'Inter, sans-serif' # Use Inter or a common sans-serif font
    },
    'style_data_conditional': [
        {
            'if': {'row_index': 'odd'},
            'backgroundColor': '#f8f9fa' # Lightest grey for odd rows (zebra striping)
        }
    ]
}

# --- Layout Definition ---
app.layout = html.Div(style={
    'fontFamily': 'Inter, sans-serif', # Global font
    'backgroundColor': '#f0f2f5', # Very light background for the entire page
    'padding': '30px',
    'minHeight': '100vh',
    'display': 'flex',
    'flexDirection': 'column',
    'alignItems': 'center'
}, children=[
    html.H1("Elegant Data Dashboard", style={
        'textAlign': 'center',
        'color': '#212529',
        'marginBottom': '30px',
        'fontSize': '2.5em',
        'fontWeight': '600'
    }),

    dcc.Tabs(id="tabs-example-graph", value='tab-1', style={
        'width': '80%', # Control width of tabs
        'maxWidth': '1200px',
        'marginBottom': '20px',
        'borderRadius': '10px',
        'overflow': 'hidden',
        'boxShadow': '0 4px 12px rgba(0, 0, 0, 0.08)',
        'backgroundColor': 'white'
    }, children=[
        dcc.Tab(label='Product Overview', value='tab-1', style={
            'padding': '15px 25px',
            'fontWeight': 'normal',
            'backgroundColor': 'white',
            'border': 'none',
            'color': '#6c757d',
            'borderRadius': '10px 0 0 10px'
        }, selected_style={
            'fontWeight': 'bold',
            'backgroundColor': '#ffffff', # White for selected tab background
            'borderTop': '3px solid #007bff', # Blue accent for selected tab
            'color': '#007bff', # Blue text for selected tab
            'borderRadius': '10px 0 0 10px'
        }),
        dcc.Tab(label='Quarterly Metrics', value='tab-2', style={
            'padding': '15px 25px',
            'fontWeight': 'normal',
            'backgroundColor': 'white',
            'border': 'none',
            'color': '#6c757d',
            'borderRadius': '0 10px 10px 0'
        }, selected_style={
            'fontWeight': 'bold',
            'backgroundColor': '#ffffff', # White for selected tab background
            'borderTop': '3px solid #007bff', # Blue accent for selected tab
            'color': '#007bff', # Blue text for selected tab
            'borderRadius': '0 10px 10px 0'
        }),
    ]),

    html.Div(id='tabs-content-example-graph', style={
        'width': '80%', # Content width matches tabs
        'maxWidth': '1200px',
        'padding': '25px',
        'backgroundColor': 'white',
        'borderRadius': '10px',
        'boxShadow': '0 4px 12px rgba(0, 0, 0, 0.08)'
    })
])

# --- Callbacks ---
@app.callback(
    dash.Output('tabs-content-example-graph', 'children'),
    dash.Input('tabs-example-graph', 'value')
)
def render_content(tab):
    if tab == 'tab-1':
        return html.Div([
            html.H3("Product Inventory Details", style={'marginBottom': '20px', 'color': '#343a40'}),
            dash_table.DataTable(
                id='table-tab1',
                columns=[{"name": i, "id": i} for i in df_tab1.columns],
                data=df_tab1.to_dict('records'),
                **table_style_common # Apply common table styles
            )
        ])
    elif tab == 'tab-2':
        return html.Div([
            html.H3("Quarterly Performance Metrics", style={'marginBottom': '20px', 'color': '#343a40'}),
            html.Div([
                html.Div([
                    html.H4(f"Table {i+1}", style={'marginBottom': '10px', 'color': '#495057'}),
                    dash_table.DataTable(
                        id=f'table-tab2-{i}',
                        columns=[{"name": col, "id": col} for col in dfs_tab2[i].columns],
                        data=dfs_tab2[i].to_dict('records'),
                        **table_style_common # Apply common table styles
                    )
                ], style={'flex': '1 1 45%', 'minWidth': '300px', 'margin': '10px'}) # Flex item for responsiveness
                for i in range(5)
            ], style={
                'display': 'flex',
                'flexWrap': 'wrap', # Allow tables to wrap to next line
                'justifyContent': 'space-around', # Distribute space
                'gap': '20px' # Gap between tables
            })
        ])

# Run the app
if __name__ == '__main__':
    app.run()
